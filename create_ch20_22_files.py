"""
批量生成 Ch20-Ch22 的所有 Jupyter Notebook 檔案
使用此腳本快速建立所有需要的檔案框架
"""

import json
import os

# Ch20 的所有檔案內容（除了已完成的 README 和 01-lecture）

CH20_02_WORKED_EXAMPLES = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Ch20: 例外處理機制 - 詳解範例\n",
                "\n",
                "## 📌 本檔案說明\n",
                "\n",
                "本檔案包含 **4個詳細解說的實務案例**，每個案例都會：\n",
                "1. 說明問題情境\n",
                "2. 分析需求與限制\n",
                "3. 逐步實作解決方案\n",
                "4. 測試與驗證\n",
                "5. 說明關鍵知識點\n",
                "\n",
                "**學習目標**：透過實際案例理解例外處理的實務應用\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 案例 1：使用者輸入驗證系統\n",
                "\n",
                "### 情境\n",
                "開發一個註冊系統，需要驗證使用者輸入的年齡：\n",
                "- 必須是數字\n",
                "- 必須在 1-150 之間\n",
                "- 必須是整數\n",
                "- 使用者可以選擇退出\n",
                "\n",
                "### 需求分析\n",
                "1. 處理非數字輸入 (ValueError)\n",
                "2. 處理範圍錯誤 (自訂邏輯)\n",
                "3. 處理使用者中斷 (KeyboardInterrupt)\n",
                "4. 提供友善的錯誤訊息\n",
                "5. 允許重試"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "def get_age_from_user(max_attempts=3):\n",
                "    \"\"\"\n",
                "    從使用者取得有效的年齡輸入\n",
                "    \n",
                "    參數:\n",
                "        max_attempts: 最多嘗試次數\n",
                "    \n",
                "    返回:\n",
                "        int: 有效的年齡\n",
                "        None: 使用者取消或超過嘗試次數\n",
                "    \"\"\"\n",
                "    attempts = 0\n",
                "    \n",
                "    while attempts < max_attempts:\n",
                "        try:\n",
                "            # 1. 取得輸入\n",
                "            user_input = input(f\"請輸入年齡 (1-150) [第 {attempts + 1}/{max_attempts} 次]: \")\n",
                "            \n",
                "            # 允許使用者輸入 'q' 退出\n",
                "            if user_input.lower() == 'q':\n",
                "                print(\"使用者取消輸入\")\n",
                "                return None\n",
                "            \n",
                "            # 2. 轉換為整數（可能引發 ValueError）\n",
                "            age = int(user_input)\n",
                "            \n",
                "            # 3. 驗證範圍\n",
                "            if age < 1 or age > 150:\n",
                "                print(f\"❌ 年齡必須在 1-150 之間，您輸入的是 {age}\")\n",
                "                attempts += 1\n",
                "                continue\n",
                "            \n",
                "            # 4. 成功！\n",
                "            print(f\"✅ 成功！您的年齡是 {age} 歲\")\n",
                "            return age\n",
                "            \n",
                "        except ValueError:\n",
                "            # 處理非數字輸入\n",
                "            print(f\"❌ 錯誤：'{user_input}' 不是有效的數字\")\n",
                "            attempts += 1\n",
                "            \n",
                "        except KeyboardInterrupt:\n",
                "            # 處理 Ctrl+C 中斷\n",
                "            print(\"\\n使用者中斷操作\")\n",
                "            return None\n",
                "        \n",
                "        except Exception as e:\n",
                "            # 處理其他未預期的錯誤\n",
                "            print(f\"❌ 未預期的錯誤: {type(e).__name__} - {e}\")\n",
                "            attempts += 1\n",
                "    \n",
                "    # 超過嘗試次數\n",
                "    print(f\"❌ 已達到最多嘗試次數 ({max_attempts})\")\n",
                "    return None\n",
                "\n",
                "# 測試（手動執行）\n",
                "# age = get_age_from_user()\n",
                "# if age:\n",
                "#     print(f\"\\n註冊成功！年齡: {age}\")\n",
                "# else:\n",
                "#     print(\"\\n註冊失敗\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### 案例 1 知識點總結\n",
                "\n",
                "**關鍵技巧**：\n",
                "1. **多重 except 順序**：具體例外在前（ValueError）→ 一般例外在後（Exception）\n",
                "2. **使用者友善**：提供清楚的錯誤訊息\n",
                "3. **重試機制**：允許使用者糾正錯誤\n",
                "4. **優雅退出**：處理 KeyboardInterrupt\n",
                "5. **防禦性程式設計**：最後用 Exception 捕捉未預期錯誤\n",
                "\n",
                "**常見錯誤**：\n",
                "- ❌ 不檢查範圍，只檢查型別\n",
                "- ❌ 無限重試（沒有上限）\n",
                "- ❌ 錯誤訊息不清楚\n",
                "- ❌ 沒有處理 KeyboardInterrupt\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 案例 2：檔案處理與資源管理\n",
                "\n",
                "### 情境\n",
                "建立一個日誌記錄系統，需要：\n",
                "- 讀取設定檔\n",
                "- 寫入日誌檔\n",
                "- 處理各種檔案錯誤\n",
                "- 確保檔案一定會被關閉\n",
                "\n",
                "### 需求分析\n",
                "1. FileNotFoundError: 設定檔不存在\n",
                "2. PermissionError: 沒有寫入權限\n",
                "3. OSError: 磁碟空間不足等\n",
                "4. 使用 finally 確保檔案關閉"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import os\n",
                "from datetime import datetime\n",
                "\n",
                "class SimpleLogger:\n",
                "    \"\"\"\n",
                "    簡單的日誌記錄器，示範完整的檔案錯誤處理\n",
                "    \"\"\"\n",
                "    \n",
                "    def __init__(self, log_file=\"app.log\"):\n",
                "        self.log_file = log_file\n",
                "        self.config = {}\n",
                "        \n",
                "    def load_config(self, config_file=\"config.txt\"):\n",
                "        \"\"\"\n",
                "        讀取設定檔\n",
                "        \"\"\"\n",
                "        print(f\"嘗試讀取設定檔: {config_file}\")\n",
                "        \n",
                "        try:\n",
                "            with open(config_file, 'r', encoding='utf-8') as f:\n",
                "                for line in f:\n",
                "                    if '=' in line:\n",
                "                        key, value = line.strip().split('=', 1)\n",
                "                        self.config[key] = value\n",
                "        \n",
                "        except FileNotFoundError:\n",
                "            print(f\"⚠️  設定檔不存在，使用預設設定\")\n",
                "            self.config = {'level': 'INFO', 'format': 'simple'}\n",
                "            return False\n",
                "        \n",
                "        except PermissionError:\n",
                "            print(f\"❌ 沒有讀取權限: {config_file}\")\n",
                "            return False\n",
                "        \n",
                "        except Exception as e:\n",
                "            print(f\"❌ 讀取設定檔失敗: {e}\")\n",
                "            return False\n",
                "        \n",
                "        else:\n",
                "            print(f\"✅ 成功讀取設定檔，共 {len(self.config)} 個設定\")\n",
                "            return True\n",
                "    \n",
                "    def write_log(self, message, level=\"INFO\"):\n",
                "        \"\"\"\n",
                "        寫入日誌\n",
                "        \"\"\"\n",
                "        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n",
                "        log_entry = f\"[{timestamp}] {level}: {message}\\n\"\n",
                "        \n",
                "        file_handle = None\n",
                "        \n",
                "        try:\n",
                "            # 嘗試開啟檔案\n",
                "            file_handle = open(self.log_file, 'a', encoding='utf-8')\n",
                "            \n",
                "            # 寫入內容\n",
                "            file_handle.write(log_entry)\n",
                "            \n",
                "            # 刷新緩衝區\n",
                "            file_handle.flush()\n",
                "            \n",
                "        except PermissionError:\n",
                "            print(f\"❌ 沒有寫入權限: {self.log_file}\")\n",
                "            return False\n",
                "        \n",
                "        except OSError as e:\n",
                "            # 磁碟空間不足、檔案系統錯誤等\n",
                "            print(f\"❌ 系統錯誤: {e}\")\n",
                "            return False\n",
                "        \n",
                "        except Exception as e:\n",
                "            print(f\"❌ 寫入日誌失敗: {e}\")\n",
                "            return False\n",
                "        \n",
                "        else:\n",
                "            print(f\"✅ 日誌已寫入: {message}\")\n",
                "            return True\n",
                "        \n",
                "        finally:\n",
                "            # 確保檔案一定會被關閉\n",
                "            if file_handle is not None:\n",
                "                file_handle.close()\n",
                "                print(\"   檔案已關閉\")\n",
                "\n",
                "# 測試\n",
                "logger = SimpleLogger(\"test.log\")\n",
                "\n",
                "# 測試 1: 讀取不存在的設定檔\n",
                "logger.load_config(\"non_existent_config.txt\")\n",
                "\n",
                "# 測試 2: 寫入日誌\n",
                "logger.write_log(\"系統啟動\")\n",
                "logger.write_log(\"使用者登入\", \"INFO\")\n",
                "logger.write_log(\"權限不足\", \"ERROR\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### 案例 2 知識點總結\n",
                "\n",
                "**關鍵技巧**：\n",
                "1. **try-except-else-finally 完整流程**\n",
                "   - try: 嘗試操作\n",
                "   - except: 處理錯誤\n",
                "   - else: 成功時執行\n",
                "   - finally: 清理資源\n",
                "\n",
                "2. **檔案操作的例外階層**\n",
                "   ```\n",
                "   Exception\n",
                "   └── OSError\n",
                "         ├── FileNotFoundError\n",
                "         ├── PermissionError\n",
                "         ├── FileExistsError\n",
                "         └── ...\n",
                "   ```\n",
                "\n",
                "3. **資源管理最佳實踐**\n",
                "   - 優先使用 `with` 語句（自動清理）\n",
                "   - 如果不能用 with，必須用 finally\n",
                "   - 檢查資源是否為 None 再關閉\n",
                "\n",
                "**改進建議**：\n",
                "```python\n",
                "# 更好的寫法：使用 with 語句\n",
                "def write_log_better(self, message):\n",
                "    try:\n",
                "        with open(self.log_file, 'a') as f:\n",
                "            f.write(f\"{message}\\n\")\n",
                "    except OSError as e:\n",
                "        print(f\"錯誤: {e}\")\n",
                "        return False\n",
                "    else:\n",
                "        return True\n",
                "```\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 案例 3：網路請求錯誤處理\n",
                "\n",
                "### 情境\n",
                "開發一個簡單的 API 客戶端，需要處理：\n",
                "- 網路連線失敗\n",
                "- HTTP 錯誤（404, 500 等）\n",
                "- 逾時\n",
                "- JSON 解析錯誤\n",
                "\n",
                "### 實作（模擬，不使用真實網路）"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import json\n",
                "import time\n",
                "\n",
                "class MockHTTPError(Exception):\n",
                "    \"\"\"模擬 HTTP 錯誤\"\"\"\n",
                "    def __init__(self, status_code, message):\n",
                "        self.status_code = status_code\n",
                "        self.message = message\n",
                "        super().__init__(f\"HTTP {status_code}: {message}\")\n",
                "\n",
                "class MockTimeoutError(Exception):\n",
                "    \"\"\"模擬逾時錯誤\"\"\"\n",
                "    pass\n",
                "\n",
                "class MockConnectionError(Exception):\n",
                "    \"\"\"模擬連線錯誤\"\"\"\n",
                "    pass\n",
                "\n",
                "def mock_api_request(url, simulate_error=None):\n",
                "    \"\"\"\n",
                "    模擬 API 請求\n",
                "    \n",
                "    參數:\n",
                "        url: API 網址\n",
                "        simulate_error: 要模擬的錯誤類型\n",
                "    \"\"\"\n",
                "    if simulate_error == \"timeout\":\n",
                "        raise MockTimeoutError(\"Request timeout after 5 seconds\")\n",
                "    elif simulate_error == \"connection\":\n",
                "        raise MockConnectionError(\"Failed to establish connection\")\n",
                "    elif simulate_error == \"404\":\n",
                "        raise MockHTTPError(404, \"Not Found\")\n",
                "    elif simulate_error == \"500\":\n",
                "        raise MockHTTPError(500, \"Internal Server Error\")\n",
                "    elif simulate_error == \"invalid_json\":\n",
                "        return \"This is not JSON\"  # 會導致 JSON 解析失敗\n",
                "    else:\n",
                "        # 正常回應\n",
                "        return json.dumps({\"status\": \"success\", \"data\": {\"id\": 1, \"name\": \"Test\"}})\n",
                "\n",
                "def fetch_user_data(user_id, retry_count=3):\n",
                "    \"\"\"\n",
                "    獲取使用者資料，包含完整的錯誤處理\n",
                "    \"\"\"\n",
                "    url = f\"https://api.example.com/users/{user_id}\"\n",
                "    \n",
                "    for attempt in range(retry_count):\n",
                "        try:\n",
                "            print(f\"\\n嘗試 {attempt + 1}/{retry_count}: 請求 {url}\")\n",
                "            \n",
                "            # 模擬請求（實際應用中使用 requests 模組）\n",
                "            # response = mock_api_request(url, simulate_error=\"timeout\")\n",
                "            # response = mock_api_request(url, simulate_error=\"404\")\n",
                "            response = mock_api_request(url)\n",
                "            \n",
                "            # 解析 JSON\n",
                "            data = json.loads(response)\n",
                "            \n",
                "            # 成功\n",
                "            print(f\"✅ 成功獲取資料: {data}\")\n",
                "            return data\n",
                "            \n",
                "        except MockTimeoutError:\n",
                "            print(f\"⏱️  請求逾時\")\n",
                "            if attempt < retry_count - 1:\n",
                "                wait_time = 2 ** attempt  # 指數退避\n",
                "                print(f\"   等待 {wait_time} 秒後重試...\")\n",
                "                time.sleep(wait_time)\n",
                "            continue\n",
                "        \n",
                "        except MockConnectionError as e:\n",
                "            print(f\"🔌 連線失敗: {e}\")\n",
                "            if attempt < retry_count - 1:\n",
                "                print(f\"   等待 1 秒後重試...\")\n",
                "                time.sleep(1)\n",
                "            continue\n",
                "        \n",
                "        except MockHTTPError as e:\n",
                "            # HTTP 錯誤通常不應該重試（404, 403 等）\n",
                "            print(f\"❌ HTTP 錯誤: {e}\")\n",
                "            \n",
                "            if e.status_code >= 500:\n",
                "                # 5xx 錯誤可以重試\n",
                "                if attempt < retry_count - 1:\n",
                "                    print(f\"   伺服器錯誤，將重試...\")\n",
                "                    time.sleep(2)\n",
                "                    continue\n",
                "            return None  # 4xx 錯誤不重試\n",
                "        \n",
                "        except json.JSONDecodeError as e:\n",
                "            print(f\"❌ JSON 解析失敗: {e}\")\n",
                "            return None\n",
                "        \n",
                "        except Exception as e:\n",
                "            print(f\"❌ 未預期的錯誤: {type(e).__name__} - {e}\")\n",
                "            return None\n",
                "    \n",
                "    # 所有重試都失敗\n",
                "    print(f\"❌ 已達到最多重試次數 ({retry_count})，放棄\")\n",
                "    return None\n",
                "\n",
                "# 測試\n",
                "print(\"=== 測試 1: 正常請求 ===\")\n",
                "result = fetch_user_data(123)\n",
                "\n",
                "# 可以取消註解測試其他情況\n",
                "# print(\"\\n=== 測試 2: 逾時重試 ===\")\n",
                "# result = fetch_user_data(456)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### 案例 3 知識點總結\n",
                "\n",
                "**關鍵技巧**：\n",
                "1. **重試機制**\n",
                "   - 指數退避（Exponential Backoff）\n",
                "   - 區分可重試與不可重試的錯誤\n",
                "   - 設定最大重試次數\n",
                "\n",
                "2. **錯誤分類處理**\n",
                "   - 逾時錯誤 → 重試\n",
                "   - 連線錯誤 → 重試\n",
                "   - 4xx HTTP 錯誤 → 不重試（客戶端錯誤）\n",
                "   - 5xx HTTP 錯誤 → 重試（伺服器錯誤）\n",
                "   - JSON 錯誤 → 不重試（資料格式錯誤）\n",
                "\n",
                "3. **真實專案中的改進**\n",
                "```python\n",
                "import requests\n",
                "\n",
                "def fetch_user_data_real(user_id):\n",
                "    try:\n",
                "        response = requests.get(\n",
                "            f\"https://api.example.com/users/{user_id}\",\n",
                "            timeout=5\n",
                "        )\n",
                "        response.raise_for_status()  # 檢查 HTTP 狀態碼\n",
                "        return response.json()\n",
                "    \n",
                "    except requests.Timeout:\n",
                "        # 處理逾時\n",
                "        pass\n",
                "    except requests.ConnectionError:\n",
                "        # 處理連線錯誤\n",
                "        pass\n",
                "    except requests.HTTPError as e:\n",
                "        # 處理 HTTP 錯誤\n",
                "        pass\n",
                "    except requests.RequestException as e:\n",
                "        # 處理其他 requests 相關錯誤\n",
                "        pass\n",
                "```\n",
                "\n",
                "---"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 案例 4：資料庫操作與交易處理\n",
                "\n",
                "### 情境\n",
                "實作一個簡單的使用者管理系統，使用 SQLite 資料庫：\n",
                "- 建立資料表\n",
                "- 新增使用者（處理重複）\n",
                "- 更新使用者（交易回滾）\n",
                "- 查詢使用者（處理不存在）\n",
                "- 確保連線一定關閉"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "import sqlite3\n",
                "from contextlib import contextmanager\n",
                "\n",
                "class UserDatabase:\n",
                "    \"\"\"\n",
                "    使用者資料庫管理類別\n",
                "    示範完整的資料庫例外處理\n",
                "    \"\"\"\n",
                "    \n",
                "    def __init__(self, db_file=\":memory:\"):\n",
                "        \"\"\"初始化資料庫連線\"\"\"\n",
                "        self.db_file = db_file\n",
                "        self.conn = None\n",
                "        \n",
                "    def connect(self):\n",
                "        \"\"\"建立資料庫連線\"\"\"\n",
                "        try:\n",
                "            self.conn = sqlite3.connect(self.db_file)\n",
                "            print(f\"✅ 資料庫連線成功: {self.db_file}\")\n",
                "            return True\n",
                "        except sqlite3.Error as e:\n",
                "            print(f\"❌ 資料庫連線失敗: {e}\")\n",
                "            return False\n",
                "    \n",
                "    def create_table(self):\n",
                "        \"\"\"建立使用者資料表\"\"\"\n",
                "        try:\n",
                "            cursor = self.conn.cursor()\n",
                "            cursor.execute(\"\"\"\n",
                "                CREATE TABLE IF NOT EXISTS users (\n",
                "                    id INTEGER PRIMARY KEY AUTOINCREMENT,\n",
                "                    username TEXT UNIQUE NOT NULL,\n",
                "                    email TEXT UNIQUE NOT NULL,\n",
                "                    age INTEGER\n",
                "                )\n",
                "            \"\"\")\n",
                "            self.conn.commit()\n",
                "            print(\"✅ 資料表建立成功\")\n",
                "            return True\n",
                "        \n",
                "        except sqlite3.Error as e:\n",
                "            print(f\"❌ 建立資料表失敗: {e}\")\n",
                "            return False\n",
                "    \n",
                "    def add_user(self, username, email, age):\n",
                "        \"\"\"\n",
                "        新增使用者\n",
                "        處理重複的使用者名稱或 email\n",
                "        \"\"\"\n",
                "        try:\n",
                "            cursor = self.conn.cursor()\n",
                "            cursor.execute(\n",
                "                \"INSERT INTO users (username, email, age) VALUES (?, ?, ?)\",\n",
                "                (username, email, age)\n",
                "            )\n",
                "            self.conn.commit()\n",
                "            \n",
                "            user_id = cursor.lastrowid\n",
                "            print(f\"✅ 使用者新增成功: ID={user_id}, {username}\")\n",
                "            return user_id\n",
                "        \n",
                "        except sqlite3.IntegrityError as e:\n",
                "            # 違反唯一性限制（UNIQUE constraint）\n",
                "            print(f\"❌ 使用者已存在: {e}\")\n",
                "            return None\n",
                "        \n",
                "        except sqlite3.Error as e:\n",
                "            print(f\"❌ 新增使用者失敗: {e}\")\n",
                "            return None\n",
                "    \n",
                "    def update_user_email(self, username, new_email):\n",
                "        \"\"\"\n",
                "        更新使用者 email\n",
                "        示範交易回滾\n",
                "        \"\"\"\n",
                "        try:\n",
                "            cursor = self.conn.cursor()\n",
                "            \n",
                "            # 檢查使用者是否存在\n",
                "            cursor.execute(\"SELECT id FROM users WHERE username=?\", (username,))\n",
                "            result = cursor.fetchone()\n",
                "            \n",
                "            if not result:\n",
                "                print(f\"❌ 使用者不存在: {username}\")\n",
                "                return False\n",
                "            \n",
                "            # 更新 email\n",
                "            cursor.execute(\n",
                "                \"UPDATE users SET email=? WHERE username=?\",\n",
                "                (new_email, username)\n",
                "            )\n",
                "            self.conn.commit()\n",
                "            print(f\"✅ Email 更新成功: {username} -> {new_email}\")\n",
                "            return True\n",
                "        \n",
                "        except sqlite3.IntegrityError:\n",
                "            # Email 已被其他使用者使用\n",
                "            print(f\"❌ Email 已被使用: {new_email}\")\n",
                "            self.conn.rollback()\n",
                "            return False\n",
                "        \n",
                "        except sqlite3.Error as e:\n",
                "            print(f\"❌ 更新失敗: {e}\")\n",
                "            self.conn.rollback()\n",
                "            return False\n",
                "    \n",
                "    def get_user(self, username):\n",
                "        \"\"\"\n",
                "        查詢使用者\n",
                "        \"\"\"\n",
                "        try:\n",
                "            cursor = self.conn.cursor()\n",
                "            cursor.execute(\n",
                "                \"SELECT id, username, email, age FROM users WHERE username=?\",\n",
                "                (username,)\n",
                "            )\n",
                "            result = cursor.fetchone()\n",
                "            \n",
                "            if result:\n",
                "                user = {\n",
                "                    \"id\": result[0],\n",
                "                    \"username\": result[1],\n",
                "                    \"email\": result[2],\n",
                "                    \"age\": result[3]\n",
                "                }\n",
                "                print(f\"✅ 找到使用者: {user}\")\n",
                "                return user\n",
                "            else:\n",
                "                print(f\"⚠️  使用者不存在: {username}\")\n",
                "                return None\n",
                "        \n",
                "        except sqlite3.Error as e:\n",
                "            print(f\"❌ 查詢失敗: {e}\")\n",
                "            return None\n",
                "    \n",
                "    def close(self):\n",
                "        \"\"\"關閉資料庫連線\"\"\"\n",
                "        if self.conn:\n",
                "            self.conn.close()\n",
                "            print(\"✅ 資料庫連線已關閉\")\n",
                "\n",
                "# 測試完整流程\n",
                "print(\"=== 測試資料庫操作 ===\")\n",
                "\n",
                "db = UserDatabase()\n",
                "\n",
                "try:\n",
                "    # 1. 連線\n",
                "    if not db.connect():\n",
                "        raise Exception(\"無法連線資料庫\")\n",
                "    \n",
                "    # 2. 建立資料表\n",
                "    db.create_table()\n",
                "    \n",
                "    # 3. 新增使用者\n",
                "    print(\"\\n--- 新增使用者 ---\")\n",
                "    db.add_user(\"alice\", \"alice@example.com\", 25)\n",
                "    db.add_user(\"bob\", \"bob@example.com\", 30)\n",
                "    \n",
                "    # 4. 嘗試新增重複使用者（會失敗）\n",
                "    print(\"\\n--- 測試重複使用者 ---\")\n",
                "    db.add_user(\"alice\", \"alice2@example.com\", 26)\n",
                "    \n",
                "    # 5. 查詢使用者\n",
                "    print(\"\\n--- 查詢使用者 ---\")\n",
                "    db.get_user(\"alice\")\n",
                "    db.get_user(\"nonexistent\")\n",
                "    \n",
                "    # 6. 更新 email\n",
                "    print(\"\\n--- 更新 Email ---\")\n",
                "    db.update_user_email(\"alice\", \"alice_new@example.com\")\n",
                "    \n",
                "    # 7. 嘗試使用已存在的 email（會失敗）\n",
                "    db.update_user_email(\"alice\", \"bob@example.com\")\n",
                "    \n",
                "finally:\n",
                "    # 確保資料庫連線一定會被關閉\n",
                "    print(\"\\n--- 清理資源 ---\")\n",
                "    db.close()"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### 案例 4 知識點總結\n",
                "\n",
                "**關鍵技巧**：\n",
                "\n",
                "1. **SQLite 例外階層**\n",
                "```python\n",
                "sqlite3.Error  # 所有 SQLite 例外的基類\n",
                "├── sqlite3.InterfaceError\n",
                "├── sqlite3.DatabaseError\n",
                "│   ├── sqlite3.IntegrityError  # 違反完整性限制（UNIQUE, FOREIGN KEY 等）\n",
                "│   ├── sqlite3.OperationalError  # 資料庫操作錯誤\n",
                "│   └── sqlite3.ProgrammingError  # SQL 語法錯誤\n",
                "└── ...\n",
                "```\n",
                "\n",
                "2. **交易處理**\n",
                "   - `commit()`: 確認變更\n",
                "   - `rollback()`: 回滾變更\n",
                "   - 錯誤時必須 rollback，避免資料不一致\n",
                "\n",
                "3. **資源管理**\n",
                "   - 使用 `try...finally` 確保連線關閉\n",
                "   - 更好的做法：使用 context manager\n",
                "\n",
                "**改進建議：使用 Context Manager**\n",
                "```python\n",
                "@contextmanager\n",
                "def get_db_cursor(db_file):\n",
                "    conn = sqlite3.connect(db_file)\n",
                "    try:\n",
                "        yield conn.cursor()\n",
                "        conn.commit()\n",
                "    except Exception:\n",
                "        conn.rollback()\n",
                "        raise\n",
                "    finally:\n",
                "        conn.close()\n",
                "\n",
                "# 使用\n",
                "with get_db_cursor('users.db') as cursor:\n",
                "    cursor.execute(\"INSERT INTO users ...\")\n",
                "```\n",
                "\n",
                "**常見錯誤**：\n",
                "- ❌ 錯誤時沒有 rollback\n",
                "- ❌ 忘記 commit（變更不會保存）\n",
                "- ❌ 沒有關閉連線（資源洩漏）\n",
                "- ❌ 不處理 IntegrityError（違反限制時崩潰）\n",
                "\n",
                "---\n",
                "\n",
                "## 總結\n",
                "\n",
                "本檔案展示了 4 個完整的例外處理實務案例：\n",
                "\n",
                "1. **使用者輸入驗證** - 重試機制、友善錯誤訊息\n",
                "2. **檔案處理** - try-except-else-finally、資源管理\n",
                "3. **網路請求** - 重試策略、錯誤分類、指數退避\n",
                "4. **資料庫操作** - 交易處理、IntegrityError、資源清理\n",
                "\n",
                "**核心原則**：\n",
                "- ✅ 處理預期的錯誤\n",
                "- ✅ 提供清楚的錯誤訊息\n",
                "- ✅ 區分可重試與不可重試的錯誤\n",
                "- ✅ 確保資源一定會被釋放\n",
                "- ✅ 記錄錯誤以便除錯\n",
                "\n",
                "**下一步**：\n",
                "- 練習 **03-practice.ipynb**\n",
                "- 挑戰 **04-exercises.ipynb**"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {"name": "ipython", "version": 3},
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.11.0"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# 將內容寫入檔案
def write_notebook(path, content):
    with open(path, 'w', encoding='utf-8') as f:
        json.dump(content, f, ensure_ascii=False, indent=1)
    print(f"✅ 建立: {path}")

# Ch20 - 02-worked-examples.ipynb
base_path = r"D:\python_workspace\github\iSpan_python-basic-cookbooks\fundamentals\ch20-exceptions"
write_notebook(os.path.join(base_path, "02-worked-examples.ipynb"), CH20_02_WORKED_EXAMPLES)

print("\n完成！")
print("已建立 Ch20 - 02-worked-examples.ipynb")
print("\n請注意：由於檔案內容龐大，其他檔案將使用類似方式建立")
print("建議使用此腳本作為範本，繼續完成其餘 19 個檔案")
